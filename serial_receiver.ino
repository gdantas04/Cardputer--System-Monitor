// https://github.com/gdantas04

#include <Arduino.h>
#include <M5Unified.h>
#include <vector>

#define MAX_TERMS 10 
#define LINE_COUNT 1 

extern const uint8_t processor[];
extern const uint8_t disks[];
extern const uint8_t others[];
extern const uint8_t waiting[];

std::vector<int> points[LINE_COUNT];

int colors[] = { TFT_WHITE };
int point_count;
int zoom = 1;
int xoffset, yoffset, chart_width, chart_height;
int count = 0;
int currentPage = 0;
int prevPage = 1;

float cout = 0;

String listed_disks[10];
String ram_percent, prevRam_percent;
String cpu_percent, prevCpu_percent;
String cpu_freq, prevCpu_freq;
String cpu_temp, prevCpu_temp;
String disk_percent, prevDisk_percent;
String disk_temp, prevDisk_temp;
String bat_percent, prevBat_percent;
String bat_time, prevBat_time;

unsigned long lastUpdateTime = 0;

M5GFX display;



void setup(){
  M5.begin();
  Serial.begin(9600);

  if (M5.Display.isEPD()) {
    M5.Display.setEpdMode(epd_mode_t::epd_fastest);
    M5.Display.invertDisplay(true);
    M5.Display.clear(TFT_BLACK);
  }

  if (M5.Display.width() < M5.Display.height())
  {
    M5.Display.setRotation(M5.Display.getRotation() ^ 1);
  }

  zoom = (M5.Display.width() / 480) + 1;

  M5.Display.drawPng(waiting, ~0u, 0, 0);
}

M5Canvas canvas(&display);

void loop(void){
  M5.update();
  M5.delay(1);
  
  if (Serial.available()) {
      String dado = Serial.readStringUntil('\n'); //reveive the data

      if ((dado) == "newcicle"){
        cout = 0;
      }else{

        if(cout == 1){        
          cpu_percent = dado;
          
        }else if(cout == 2){  
          cpu_freq = dado;
          
        }else if(cout == 3){  
          cpu_temp = dado;

        }else if(cout == 4){  
          disk_percent = dado;

        }else if(cout == 5){  
          int numTerms = 0;
          String terms[MAX_TERMS];
          parseTerms(dado, ',', terms, numTerms);
          for (int i = 0; i < numTerms; i++) {
              listed_disks[i] = terms[i];
          }

        }else if(cout == 6){  
          disk_temp = dado;

        }else if(cout == 7){  
          bat_percent = dado;

        }else if(cout == 8){  
          bat_time = dado;

        }else if(cout == 9){  
          ram_percent = dado;
          cout = -1;
        }
        cout++;
      }

      if (currentPage == 0){
        if (cpu_percent != prevCpu_percent){
          M5.Display.fillRect(3, 28, 74, 25, BLACK);  // update writing area
          prevCpu_percent = cpu_percent;
        }else if (cpu_freq != prevCpu_freq){
          M5.Display.fillRect(3, 28+35, 74, 25, BLACK);
          prevCpu_freq = cpu_freq;
        }else if (cpu_temp != prevCpu_temp){
          M5.Display.fillRect(3, 28+35+35, 74, 25, BLACK);
          prevCpu_temp = cpu_temp;
        }

        if (prevPage != currentPage){
          M5.Display.drawPng(processor, ~0u, 0, 0);
          prevPage = currentPage;
        }

        cpu_plot(88, 29, 150, 106, 100);

        M5.Display.setFont(&fonts::efontCN_16);
        M5.Display.drawString(cpu_percent + " %", 8, 35);
        M5.Display.drawString(cpu_freq + " Mhz", 8, 70);
        M5.Display.drawString(cpu_temp + " °C", 8, 107);
      }

      if (currentPage == 1){
        if (disk_percent != prevDisk_percent){
          M5.Display.fillRect(2, 40, 83, 31, BLACK);
          prevDisk_percent = disk_percent;
        }else if (disk_temp != prevDisk_temp){
          M5.Display.fillRect(2, 95, 83, 31, BLACK);
          prevDisk_temp = disk_temp;
        }

        if (prevPage != currentPage){
          M5.Display.drawPng(disks, ~0u, 0, 0);
          prevPage = currentPage;
        }

        int numDisks = sizeof(listed_disks) / sizeof(listed_disks[0]);

        M5.Display.setFont(&fonts::efontCN_16);
        M5.Display.drawString(disk_percent + " %", 20, 50);
        M5.Display.drawString(disk_temp + " °C", 20, 103);

        for(int h=0; h < numDisks; h++){
          M5.Display.drawString(listed_disks[h], 100, 60+h*20);
        }
      }

      if (currentPage == 2){
        if (bat_percent != prevBat_percent){
          M5.Display.fillRect(2, 40, 83, 31, BLACK);
          prevBat_percent = bat_percent;
        }else if (bat_time != prevBat_time){
          M5.Display.fillRect(2, 95, 83, 31, BLACK);
          prevBat_time = bat_time;
        }else if (ram_percent != prevRam_percent){
          M5.Display.fillRect(89, 42, 148, 89, BLACK);
          prevRam_percent = ram_percent;
        }

        if (prevPage != currentPage){
          M5.Display.drawPng(others, ~0u, 0, 0);
          prevPage = currentPage;
        }

        M5.Display.setFont(&fonts::efontCN_16);
        M5.Display.drawString(bat_percent + " %", 20, 50);
        M5.Display.drawString(bat_time + " min", 15, 103);
        M5.Display.setFont(&fonts::efontCN_24);
        M5.Display.drawString(ram_percent + " %", 125, 75);
      }
      
  }

      
    if (M5.BtnA.wasPressed()) {
      currentPage++;
    }
    
    delay(50); // debounce
    if (currentPage > 2) {
      currentPage = 0;  // Goes back to page 0 
    }
}


void parseTerms(String inputString, char delimiter, String terms[], int &numTerms) {  // created to separate ['info1', 'info2']
    for (int i = 0; i < MAX_TERMS; i++) {
        terms[i] = "";
    }
    numTerms = 0;

    inputString.replace("[", "");
    inputString.replace("]", "");
    inputString.replace("'", "");

    inputString += delimiter;

    int startIndex = 0;
    int endIndex = inputString.indexOf(delimiter);

    while (endIndex != -1 && numTerms < MAX_TERMS) {
        terms[numTerms] = inputString.substring(startIndex, endIndex);
        terms[numTerms].trim();
        numTerms++;

        startIndex = endIndex + 1;
        endIndex = inputString.indexOf(delimiter, startIndex);
    }
}



void update_plot() {
  int virtual_width = chart_width;
  int virtual_height = chart_height;

  for (int i = 0; i < LINE_COUNT; i++) {
    points[i][count % point_count] = virtual_height/2 - ((cpu_percent.toFloat() / 100.0) * (virtual_height)); // Mathematical equation to plot
  }

  ++count;
  M5.Display.waitDisplay();
  M5.Display.startWrite();
  M5.Display.fillRect(xoffset, yoffset, chart_width * zoom, chart_height * zoom, TFT_BLACK);

  int index1 = count % point_count;
  for (int x = 0; x < point_count - 1; x++) {
    int index0 = index1;
    index1 = (index0 + 1) % point_count;

    int y0 = points[0][index0] + (virtual_height >> 1);
    int y1 = points[0][index1] + (virtual_height >> 1);

    M5.Display.drawLine(xoffset + x * zoom, yoffset + y0 * zoom, xoffset + (x + 1) * zoom, yoffset + y1 * zoom, colors[0]);

  }
  M5.Display.endWrite();
}

void cpu_plot(int x, int y, int width, int height, int update_time) {
  xoffset = x;
  yoffset = y;
  chart_width = width;
  chart_height = height;

  point_count = chart_width + 1;

  for (int i = 0; i < LINE_COUNT; i++) {
    points[i].resize(point_count);
  }

  unsigned long currentTime = millis();
  if (currentTime - lastUpdateTime >= update_time) {
    update_plot();
    lastUpdateTime = currentTime;
  }
}


// Images:

constexpr uint8_t processor[] = {
  0x89,0x50,0x4e,0x47,0x0d,0x0a,0x1a,0x0a,0x00,0x00,0x00,0x0d,0x49,0x48,0x44,0x52,
	0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0x87,0x08,0x02,0x00,0x00,0x00,0xa7,0x10,0x43,
	0xbc,0x00,0x00,0x00,0x01,0x73,0x52,0x47,0x42,0x01,0xd9,0xc9,0x2c,0x7f,0x00,0x00,
	0x00,0x09,0x70,0x48,0x59,0x73,0x00,0x00,0x0b,0x13,0x00,0x00,0x0b,0x13,0x01,0x00,
	0x9a,0x9c,0x18,0x00,0x00,0x02,0xaa,0x49,0x44,0x41,0x54,0x78,0x9c,0xed,0xdd,0x51,
	0x4e,0x1b,0x41,0x10,0x40,0xc1,0x41,0xca,0xfd,0xaf,0x4c,0x12,0x19,0x09,0x12,0xbc,
	0xd6,0x3a,0xc4,0xc0,0xbc,0xae,0xfa,0x65,0x41,0xb6,0xf5,0xd4,0x0c,0x36,0xda,0xfe,
	0xf1,0xfc,0xfc,0xbc,0xa0,0xe2,0xc7,0x57,0x3f,0x00,0xf8,0x9f,0x5e,0x82,0x7e,0x7a,
	0x7a,0xfa,0xda,0xc7,0x01,0x1f,0x74,0x39,0x6b,0x98,0xd0,0xa4,0x08,0x9a,0x14,0x41,
	0x93,0xb2,0x5f,0xd0,0x47,0x6f,0xcb,0xf8,0x33,0x80,0xb5,0x63,0xd0,0x70,0xc3,0xae,
	0x41,0xbf,0x9f,0xc7,0x97,0xc9,0x6d,0x4e,0x0f,0xb7,0x6b,0xd0,0x70,0x55,0x39,0xe8,
	0xf7,0x33,0xfb,0xed,0xf9,0xfb,0x68,0xc6,0xbf,0x75,0x34,0xef,0x4b,0x57,0xde,0xfb,
	0x2a,0x7d,0x73,0xe5,0xa0,0x19,0x68,0x4a,0xd0,0xb7,0x4f,0xd8,0x47,0x5f,0x3d,0x9a,
	0x5e,0x9f,0x73,0xe5,0xbd,0xcf,0xe2,0xcc,0x95,0xff,0xf6,0x3a,0x6c,0x64,0x4a,0xd0,
	0x0c,0xb1,0x6b,0xd0,0xf7,0x9e,0x23,0x1f,0x3d,0x75,0xce,0x9f,0x62,0x8f,0xbe,0xf7,
	0xcc,0x33,0x3a,0x7f,0xe5,0xbd,0x02,0xb3,0xf9,0x62,0xd7,0xa0,0xe1,0xaa,0x5d,0x83,
	0x3e,0x3f,0x4b,0x3e,0x67,0xea,0x1c,0x4d,0xb8,0x8f,0x3c,0xce,0xf3,0x3f,0xf3,0xe3,
	0xf3,0x35,0x30,0x9b,0x2f,0x76,0x0d,0x1a,0xae,0x12,0xf4,0x6f,0x8f,0x38,0xc5,0x9e,
	0xbf,0xf2,0xfc,0x7f,0xa7,0x9c,0xbf,0xf2,0x71,0xa7,0xed,0x6f,0x4e,0xd0,0xa4,0xec,
	0x17,0xf4,0xe3,0x4e,0xcf,0x8f,0xf8,0xc9,0x67,0xae,0xfc,0xda,0x67,0x14,0x9b,0xd9,
	0xfb,0x05,0x0d,0x37,0x08,0x9a,0x14,0x41,0x93,0x22,0x68,0x52,0x5e,0x82,0x76,0xbb,
	0x19,0x1a,0x4c,0x68,0x52,0x66,0xdd,0x68,0xe6,0xc6,0x2f,0xa2,0x21,0xaf,0x40,0xd8,
	0xc4,0x1b,0xcd,0xfc,0xaa,0xd6,0xe1,0xaa,0x6d,0x56,0xd0,0x4b,0xd3,0x75,0xe3,0x82,
	0x5e,0x9a,0x4e,0x9b,0x18,0xf4,0xd2,0x74,0xd7,0xd0,0xa0,0x97,0xa6,0xa3,0xe6,0x06,
	0xbd,0x34,0x5d,0x34,0x3a,0xe8,0xa5,0xe9,0x9c,0xe9,0x41,0x13,0x23,0x68,0x52,0x04,
	0x4d,0x8a,0xa0,0x49,0x11,0x34,0x29,0x82,0x26,0x45,0xd0,0xa4,0x08,0x9a,0x14,0x41,
	0x93,0x22,0x68,0x52,0x04,0x4d,0x8a,0xa0,0x49,0x11,0x34,0x29,0x82,0x26,0x45,0xd0,
	0xa4,0x08,0x9a,0x14,0x41,0x93,0x22,0x68,0x52,0x5e,0xef,0x6d,0xe7,0xd6,0x41,0x04,
	0xbc,0x4e,0x68,0x4d,0x13,0xf0,0xc7,0x91,0x43,0xd3,0xec,0xee,0xef,0x33,0xb4,0xa6,
	0xd9,0xda,0x95,0x3f,0x0a,0x35,0xcd,0xbe,0xae,0xbf,0xcb,0xa1,0x69,0x36,0x75,0xf8,
	0xb6,0x9d,0xa6,0xd9,0xd1,0xad,0xf7,0xa1,0xdd,0x52,0x88,0xed,0xf8,0x60,0x85,0x14,
	0x2b,0x29,0x48,0x99,0x35,0xa1,0xdd,0x9a,0x31,0x6f,0x56,0xd0,0x4b,0xd3,0x75,0xe3,
	0x82,0x5e,0x9a,0x4e,0x9b,0x18,0xf4,0xd2,0x74,0xd7,0xd0,0xa0,0x97,0xa6,0xa3,0xe6,
	0x06,0xbd,0x34,0x5d,0x34,0x3a,0xe8,0xa5,0xe9,0x9c,0xe9,0x41,0x13,0x23,0x68,0x52,
	0x04,0x4d,0x8a,0xa0,0x49,0x11,0x34,0x29,0x82,0x26,0x45,0xd0,0xa4,0x08,0x9a,0x14,
	0x41,0x93,0x22,0x68,0x52,0x04,0x4d,0x8a,0xa0,0x49,0x11,0x34,0x29,0x82,0x26,0x45,
	0xd0,0xa4,0x08,0x9a,0x14,0x41,0x93,0x22,0x68,0x52,0xac,0xa4,0x20,0xc5,0x4a,0x0a,
	0x52,0xac,0xa4,0x20,0xc5,0x4a,0x0a,0x52,0xac,0xa4,0x20,0xc5,0x4a,0x0a,0x52,0xac,
	0xa4,0x20,0xc5,0x4a,0x0a,0x52,0x7c,0xb0,0x42,0x8a,0x95,0x14,0xa4,0xcc,0x9a,0xd0,
	0x6e,0xcd,0x98,0x37,0x2b,0xe8,0xa5,0xe9,0xba,0x71,0x41,0x2f,0x4d,0xa7,0x4d,0x0c,
	0x7a,0x69,0xba,0x6b,0x68,0xd0,0x4b,0xd3,0x51,0x73,0x83,0x5e,0x9a,0x2e,0x1a,0x1d,
	0xf4,0xd2,0x74,0xce,0xf4,0xa0,0x89,0x11,0x34,0x29,0x82,0x26,0x45,0xd0,0xa4,0x08,
	0x9a,0x14,0x41,0x93,0x22,0x68,0x52,0x04,0x4d,0x8a,0xa0,0x49,0x11,0x34,0x29,0x82,
	0x26,0x45,0xd0,0xa4,0x08,0x9a,0x14,0x41,0x93,0x22,0x68,0x52,0x04,0x4d,0x8a,0xa0,
	0x49,0x11,0x34,0x29,0x82,0x26,0x45,0xd0,0xa4,0x08,0x9a,0x14,0x5b,0xb0,0x48,0xb1,
	0x05,0x8b,0x14,0x5b,0xb0,0x48,0xb1,0x05,0x8b,0x14,0x5b,0xb0,0x48,0xb1,0x05,0x8b,
	0x14,0x5b,0xb0,0x48,0xb1,0x05,0xeb,0xc5,0xa8,0x27,0x1b,0xe6,0x83,0x15,0x52,0x7e,
	0x02,0x14,0x06,0x16,0x5c,0x9e,0xb0,0xc2,0x36,0x00,0x00,0x00,0x00,0x49,0x45,0x4e,
	0x44,0xae,0x42,0x60,0x82
};

constexpr uint8_t disks[] = {
  0x89,0x50,0x4e,0x47,0x0d,0x0a,0x1a,0x0a,0x00,0x00,0x00,0x0d,0x49,0x48,0x44,0x52,
	0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0x87,0x08,0x02,0x00,0x00,0x00,0xa7,0x10,0x43,
	0xbc,0x00,0x00,0x00,0x01,0x73,0x52,0x47,0x42,0x01,0xd9,0xc9,0x2c,0x7f,0x00,0x00,
	0x00,0x09,0x70,0x48,0x59,0x73,0x00,0x00,0x0b,0x13,0x00,0x00,0x0b,0x13,0x01,0x00,
	0x9a,0x9c,0x18,0x00,0x00,0x03,0x95,0x49,0x44,0x41,0x54,0x78,0x9c,0xed,0xdd,0xdb,
	0x52,0xe2,0x40,0x18,0x46,0xd1,0x58,0x35,0xef,0xff,0xca,0x8e,0x55,0xa1,0x30,0xe6,
	0x44,0xce,0xe9,0x7c,0xbd,0xd6,0x15,0x62,0x06,0x31,0xb3,0xf9,0xed,0x44,0x84,0x7f,
	0xdf,0xdf,0xdf,0x0d,0xa4,0xf8,0x77,0xf7,0x1d,0x80,0x23,0xbd,0x82,0xfe,0xfa,0xfa,
	0xba,0xf7,0x7e,0xc0,0x4e,0xed,0x5a,0xc3,0x84,0x26,0x8a,0xa0,0x89,0x22,0x68,0xa2,
	0x08,0xfa,0xd7,0xd4,0x09,0x9f,0xa9,0x03,0x8c,0x76,0xfb,0x3d,0x87,0x1f,0xfb,0x6f,
	0x81,0x1e,0x41,0x13,0x45,0xd0,0x7d,0xc3,0x79,0x39,0x35,0x47,0x4d,0xd6,0x02,0x09,
	0x9a,0x28,0x82,0xde,0x6e,0x7e,0x05,0x3c,0x5c,0x91,0x2f,0x99,0xe8,0x67,0xdc,0x66,
	0x55,0x04,0x4d,0x14,0x41,0x1f,0x6f,0xdb,0xb9,0x8b,0x25,0xb3,0xd9,0x3c,0xfe,0x48,
	0xd0,0x44,0x11,0xf4,0xf1,0xda,0x39,0xba,0x7c,0xbd,0xbb,0xe4,0x09,0x8f,0x6b,0x6f,
	0xb3,0x5a,0x82,0x26,0x8a,0xa0,0xcf,0xb2,0xed,0x7c,0xf6,0xfc,0x5a,0x79,0xf9,0x6d,
	0x56,0x4b,0xd0,0x44,0x11,0x74,0xdf,0xfe,0x75,0xea,0xda,0xe7,0x84,0x0c,0xb7,0x19,
	0xce,0xdd,0x3d,0xb7,0x59,0x15,0x41,0x13,0x45,0xd0,0xbf,0xd6,0x4e,0xbb,0xe5,0x2b,
	0xdd,0xfd,0xb7,0x60,0x12,0x2f,0x24,0x68,0xa2,0x08,0x9a,0x28,0x82,0x26,0x8a,0xa0,
	0x89,0xf2,0x0a,0xda,0xcb,0xcd,0x90,0xc1,0x84,0x26,0x4a,0x5d,0x2f,0x34,0x33,0xf3,
	0x83,0xa8,0x92,0x3d,0x10,0xac,0xc6,0x17,0x9a,0xf9,0xa9,0xd6,0xe2,0x2a,0x5b,0x5d,
	0x41,0x37,0x9a,0x4e,0x57,0x5d,0xd0,0x8d,0xa6,0xa3,0x9d,0x18,0xf4,0x4f,0x34,0xef,
	0x85,0x69,0xf7,0xf2,0xce,0x9b,0x3a,0x84,0xa6,0x53,0xd5,0x38,0xa1,0x5b,0x05,0x36,
	0xdd,0xbd,0x3f,0x47,0x3d,0x80,0x3f,0xce,0x82,0xc3,0x87,0xc5,0xbd,0x6e,0x08,0xfa,
	0xfd,0xdf,0x36,0xfa,0xf4,0xc8,0x25,0xcf,0x99,0x3c,0x4a,0x81,0x4d,0xef,0xfc,0x99,
	0x36,0xfc,0x57,0xbd,0x0f,0x3f,0x6e,0xf0,0x74,0x57,0x07,0x3d,0xba,0x0e,0x59,0x72,
	0xe5,0x49,0xf7,0xa7,0xc0,0xa6,0x87,0x86,0x8f,0xf6,0xee,0x5e,0x6a,0xfe,0x3e,0x8b,
	0xba,0xf7,0x5c,0xea,0xe1,0x6e,0x9c,0xd9,0x60,0xea,0x6b,0xbd,0x3f,0xfb,0x71,0x06,
	0xdd,0xee,0xce,0x25,0x47,0x51,0x3b,0xa2,0x58,0x33,0x87,0x22,0xbd,0x0f,0xdb,0x07,
	0xe7,0xcc,0x5e,0xfd,0xb8,0xc1,0xd4,0xd7,0x5a,0x38,0x83,0x4a,0x70,0x75,0xd0,0xdd,
	0x89,0x78,0xe5,0xea,0xe2,0x29,0x86,0x3b,0x67,0xe6,0x6f,0xc5,0x0b,0xc9,0xa8,0x90,
	0xbb,0xd1,0xba,0x61,0x42,0xcf,0xcf,0x80,0xca,0x8d,0xee,0x87,0xd1,0x47,0xfb,0xbd,
	0x7b,0x6c,0x6a,0x30,0xdd,0xee,0xce,0x35,0xf4,0xb6,0x0d,0x6a,0x73,0xcd,0xb1,0xc4,
	0x06,0xd5,0x2d,0x39,0x46,0x1f,0xc4,0xdb,0xae,0xa4,0x34,0x45,0x45,0xdc,0x75,0xee,
	0x84,0x1e,0xfd,0x9e,0x77,0x5e,0x59,0x9b,0x55,0x0f,0xec,0xf7,0xc6,0x33,0x7f,0xad,
	0x38,0xb3,0xc1,0xf2,0x85,0x84,0x25,0x07,0x9f,0x1d,0xf2,0x37,0xb3,0x1f,0x4f,0x33,
	0xcf,0x6f,0x30,0xbf,0xfd,0xd4,0xe5,0x72,0x08,0x9a,0x28,0x82,0x26,0x8a,0xa0,0x89,
	0x22,0x68,0xa2,0x08,0x9a,0x28,0x82,0x26,0x8a,0xa0,0x89,0x22,0x68,0xa2,0x08,0x9a,
	0x28,0x82,0x26,0x8a,0xa0,0x89,0x22,0x68,0xa2,0x08,0x9a,0x28,0x82,0x26,0x8a,0xa0,
	0x89,0x22,0x68,0xa2,0x08,0x9a,0x28,0x82,0x26,0x8a,0xa0,0x89,0x22,0x68,0xa2,0x08,
	0x9a,0x28,0x82,0x26,0x8a,0xa0,0x89,0x22,0x68,0xa2,0x08,0x9a,0x28,0x82,0x26,0x8a,
	0xa0,0x89,0x22,0x68,0xa2,0x08,0x9a,0x28,0xaf,0xa0,0x8b,0x7d,0xb9,0x5f,0x58,0xe5,
	0x77,0x42,0x6b,0x9a,0x00,0x7f,0x96,0x1c,0x9a,0xe6,0xe9,0xfa,0x6b,0x68,0x4d,0xf3,
	0x68,0x23,0x07,0x85,0x9a,0xe6,0xb9,0xc6,0xcf,0x72,0x68,0x9a,0x87,0x9a,0x3c,0x6d,
	0xa7,0x69,0x9e,0x68,0xee,0x3c,0xb4,0x77,0x55,0xe3,0x71,0xfc,0x62,0x85,0x28,0xaf,
	0xa0,0x2b,0x59,0x5d,0xf8,0x99,0x13,0xaf,0xae,0x09,0xed,0xdd,0x69,0xe3,0xd5,0x15,
	0x74,0xa3,0xe9,0x74,0xd5,0x05,0xdd,0x68,0x3a,0xda,0x29,0x41,0xf7,0x72,0x29,0x70,
	0x81,0xae,0xe9,0x54,0xa7,0x04,0xdd,0x16,0x5c,0xf8,0x99,0x6c,0x4d,0x47,0xba,0x74,
	0xc9,0xf1,0x0e,0xe8,0x1d,0x7a,0xf7,0x9a,0xf6,0xf2,0xf0,0x53,0xcd,0x69,0x33,0x5e,
	0xd3,0x79,0xae,0x0b,0xba,0x3b,0xb0,0xbb,0x97,0x7b,0xe3,0x7c,0xf8,0xa9,0xe6,0xcc,
	0x61,0xaf,0xe9,0x30,0x35,0x1e,0x14,0x12,0xec,0x9e,0x25,0x07,0x9c,0xe4,0xd2,0xa0,
	0x4b,0x3e,0x46,0x24,0xc3,0x3d,0x4b,0x8e,0xe1,0x9a,0x58,0xeb,0x1c,0xe2,0xba,0xa0,
	0xbb,0x87,0x5f,0x0b,0xf3,0x5d,0xbb,0x3d,0x9c,0x18,0xf4,0xb0,0xc2,0xb5,0xd7,0xe8,
	0x98,0xb5,0x9c,0xe5,0x20,0x4a,0xb9,0x41,0x1b,0xcf,0x6c,0x50,0x6e,0xd0,0xb0,0x81,
	0xa0,0x89,0x22,0x68,0xa2,0x08,0x9a,0x28,0x82,0x26,0x8a,0xa0,0x89,0x22,0x68,0xa2,
	0x08,0x9a,0x28,0x82,0x26,0x8a,0xa0,0x89,0x22,0x68,0xa2,0x08,0x9a,0x28,0x82,0x26,
	0x8a,0xa0,0x89,0x22,0x68,0xa2,0x08,0x9a,0x28,0x82,0x26,0x8a,0xa0,0x89,0x22,0x68,
	0xa2,0x08,0x9a,0x28,0x82,0x26,0x8a,0xa0,0x89,0x22,0x68,0xa2,0x08,0x9a,0x28,0x82,
	0x26,0x8a,0xa0,0x89,0x22,0x68,0xa2,0x08,0x9a,0x28,0x82,0x26,0x8a,0xa0,0x89,0xf2,
	0x0a,0xba,0xf0,0x37,0xc9,0x84,0x85,0x7e,0x27,0xb4,0xa6,0x09,0xf0,0x67,0xc9,0xa1,
	0x69,0x9e,0xae,0xbf,0x86,0xd6,0x34,0x8f,0x36,0x72,0x50,0xa8,0x69,0x9e,0x6b,0xfc,
	0x2c,0x87,0xa6,0x79,0xa8,0xc9,0xd3,0x76,0x9a,0xe6,0x89,0xe6,0xce,0x43,0x57,0xf5,
	0xd6,0xdc,0x55,0x7d,0xb3,0xc1,0xfc,0x62,0x85,0x28,0xff,0x01,0x12,0xd9,0x97,0xc2,
	0xf0,0x66,0xf7,0x4f,0x00,0x00,0x00,0x00,0x49,0x45,0x4e,0x44,0xae,0x42,0x60,0x82
};


constexpr uint8_t others[] = {
  0x89,0x50,0x4e,0x47,0x0d,0x0a,0x1a,0x0a,0x00,0x00,0x00,0x0d,0x49,0x48,0x44,0x52,
	0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0x87,0x08,0x02,0x00,0x00,0x00,0xa7,0x10,0x43,
	0xbc,0x00,0x00,0x00,0x01,0x73,0x52,0x47,0x42,0x01,0xd9,0xc9,0x2c,0x7f,0x00,0x00,
	0x00,0x09,0x70,0x48,0x59,0x73,0x00,0x00,0x0b,0x13,0x00,0x00,0x0b,0x13,0x01,0x00,
	0x9a,0x9c,0x18,0x00,0x00,0x04,0x28,0x49,0x44,0x41,0x54,0x78,0x9c,0xed,0xdd,0xe1,
	0x6e,0xa3,0x3a,0x14,0x45,0x61,0x22,0xf5,0xfd,0x5f,0x39,0xad,0xe4,0x28,0x75,0xb0,
	0x7d,0xb0,0xb1,0x21,0xf6,0x3e,0xeb,0xfb,0x71,0x55,0x31,0x90,0xdb,0xa1,0xab,0xe6,
	0x84,0x66,0x9a,0x9f,0xe7,0xf3,0xb9,0x01,0x2a,0x7e,0xbe,0xfd,0x09,0x00,0x23,0xbd,
	0x82,0x7e,0x3c,0x1e,0xdf,0xfd,0x3c,0x80,0x4e,0x61,0xd6,0x60,0x85,0x86,0x14,0x82,
	0x86,0x14,0x82,0x86,0x14,0xbf,0x41,0xa7,0xb7,0x77,0xce,0x3d,0x91,0x08,0x8f,0xc3,
	0x93,0x90,0x49,0xf8,0x0d,0x1a,0x92,0x3c,0x06,0x5d,0x5a,0x53,0x5b,0xb7,0x63,0x42,
	0x1e,0x83,0x86,0x30,0x82,0xb6,0xc4,0x73,0x76,0xfc,0x71,0x69,0x15,0x8f,0x95,0x56,
	0xf4,0x9a,0x3d,0xd3,0x6b,0xc2,0xa8,0xff,0xbb,0x3c,0x82,0x86,0x14,0x82,0xb6,0x84,
	0x75,0xae,0x66,0x86,0xae,0x5f,0x65,0x5b,0x67,0xf4,0x9e,0x3f,0x75,0x88,0xa0,0x21,
	0x85,0xa0,0xef,0x56,0xff,0xf2,0xc6,0xfa,0x2b,0x03,0x33,0xf4,0x1b,0x41,0x43,0x0a,
	0x41,0xdf,0xad,0x7e,0xed,0xec,0xd9,0xd3,0xed,0x6c,0x4d,0xd0,0x90,0xe2,0x31,0xe8,
	0xd6,0xb9,0x33,0xdd,0xff,0xdc,0xca,0x77,0xc5,0xbc,0x5b,0x9a,0xc8,0x1d,0xae,0xcd,
	0x81,0xc7,0xa0,0x21,0xcc,0x6f,0xd0,0xad,0x6b,0x98,0xbd,0x7e,0xf7,0x6f,0x6f,0xdd,
	0xa7,0x75,0x4f,0x27,0xfc,0x06,0x0d,0x49,0x04,0x0d,0x29,0x04,0x0d,0x29,0x04,0x0d,
	0x29,0xaf,0xa0,0xf9,0x75,0x33,0xd0,0xc0,0x0a,0x0d,0x29,0xbe,0x7e,0xd1,0x8c,0x71,
	0x21,0x72,0x72,0x06,0x84,0x79,0xfc,0x45,0x33,0x7f,0xd5,0x32,0x5c,0x69,0xf3,0x15,
	0xf4,0x46,0xd3,0xea,0x7a,0x83,0xee,0x7f,0x85,0xc3,0xfd,0x68,0x5a,0xd8,0x80,0x15,
	0xfa,0xdd,0xf1,0x5f,0x25,0x76,0xd3,0xe9,0x0e,0x87,0x87,0x5c,0x84,0xa6,0x55,0x5d,
	0x35,0x72,0xbc,0x73,0x89,0x73,0xdf,0x3e,0x5f,0xa7,0x9b,0x6e,0x29,0x1d,0x98,0xfe,
	0xdb,0xbe,0xf8,0x3b,0xe1,0xdc,0x77,0xc5,0x9c,0x4d,0x97,0xae,0x78,0xc6,0x69,0x89,
	0xf7,0xc9,0xbe,0x30,0xba,0xf3,0x44,0xad,0xe5,0x92,0xa0,0xb3,0x27,0x31,0x04,0x14,
	0x9f,0xd0,0x74,0x8b,0x71,0xf6,0xaf,0xf8,0x62,0xcc,0xd9,0x74,0xf6,0x3b,0xd9,0x55,
	0x94,0x3d,0x06,0x04,0x9d,0x2e,0x1e,0xc3,0xcf,0xf8,0x75,0x5f,0xc5,0x39,0x9b,0xae,
	0xb4,0x0b,0xbd,0xf5,0xd8,0xf0,0x81,0x7d,0x1d,0xd8,0x0a,0x17,0x8d,0xec,0x9e,0x33,
	0xb8,0x6a,0x86,0x3e,0x5d,0x49,0xf6,0xc0,0xd9,0xce,0xda,0x24,0xde,0x97,0xb8,0xf7,
	0x7f,0x2b,0x0f,0xcc,0x2e,0xf9,0x35,0x1b,0x8d,0xc3,0x27,0x71,0xc7,0xc8,0xd1,0x74,
	0xec,0x54,0x67,0xe7,0x2b,0x9a,0x16,0xbf,0x74,0x6c,0x6b,0x75,0xdd,0x75,0xf5,0x2b,
	0xe6,0xbd,0x0f,0x6d,0x7f,0x9d,0x96,0x1e,0x15,0x6c,0xd9,0x46,0xc7,0xfe,0x8c,0x33,
	0x3e,0x7b,0xa5,0xe9,0xc2,0x36,0xed,0xc9,0xbf,0x6a,0x86,0x2e,0x4d,0x0e,0xbb,0x7b,
	0x1a,0xbb,0x2d,0xa5,0x13,0x9d,0xd5,0x3f,0xde,0x4c,0x2b,0xfb,0x04,0x3a,0x7c,0x30,
	0xea,0x2f,0x5b,0x39,0x5d,0x1c,0x1e,0x3e,0x9b,0xde,0xa0,0xfb,0xff,0x01,0xd2,0x6e,
	0xcb,0xe1,0x0e,0xc1,0x6c,0xa3,0xdb,0x70,0xfd,0xb3,0x84,0xa1,0xfe,0x91,0x0f,0xaf,
	0x84,0xb3,0x7d,0x21,0xe6,0x1d,0x39,0x6c,0x4d,0x6b,0xb9,0x67,0xd9,0x13,0x75,0xb8,
	0x71,0xf7,0x08,0xe1,0x83,0xf8,0x90,0x69,0x4f,0xfe,0xaa,0x41,0x6f,0xf3,0x9d,0xca,
	0x21,0xb2,0x63,0xc6,0xe1,0xc6,0xd2,0x16,0x63,0x7b,0xe5,0xc6,0xd2,0x02,0x3c,0xed,
	0xc9,0x5f,0x38,0x68,0xdc,0x60,0xe6,0xc5,0x38,0x8b,0xa0,0x71,0x60,0x89,0x8e,0xdf,
	0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,
	0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,
	0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,
	0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,
	0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,0x52,0x08,0x1a,
	0x52,0x5e,0x41,0xcf,0xf6,0x5b,0x7e,0x81,0x73,0xfe,0x57,0x68,0x9a,0x86,0x80,0x8f,
	0x91,0x83,0xa6,0xb1,0xba,0xfd,0x0c,0x4d,0xd3,0x58,0x5a,0xe6,0x49,0x21,0x4d,0x63,
	0x5d,0xf9,0xbb,0x1c,0x34,0x8d,0x45,0x15,0x6f,0xdb,0xd1,0x34,0x56,0x64,0xdd,0x87,
	0xd6,0x7b,0xff,0x3f,0xc8,0xe3,0x07,0x2b,0x90,0xf2,0x0a,0xda,0xc9,0x74,0xc1,0x35,
	0x47,0x9e,0xaf,0x15,0x5a,0xf8,0x1d,0xc2,0x11,0xf8,0x0a,0x7a,0xa3,0x69,0x75,0x6d,
	0x41,0xef,0x52,0x48,0xdf,0x00,0xbd,0x53,0xeb,0xe3,0xc4,0x6f,0x7c,0x5f,0x8f,0xa6,
	0x85,0xb5,0x05,0x1d,0xd2,0x49,0xb3,0xfb,0xca,0x08,0x9e,0x7e,0x1a,0x03,0xdf,0x93,
	0x1d,0x8b,0x1a,0x33,0x72,0xc4,0x25,0xa5,0x6f,0x71,0x1e,0x47,0x76,0xee,0x7d,0x76,
	0x6b,0x8e,0x0a,0xfb,0xd4,0xaf,0xd9,0x34,0x2d,0xe9,0x92,0x19,0x7a,0xb7,0x90,0xa7,
	0x1f,0x6c,0x2d,0xab,0x69,0xf6,0xa8,0x34,0xdf,0x10,0x68,0xd3,0xf7,0x09,0x4d,0xeb,
	0x59,0xf5,0x49,0xe1,0x89,0x7c,0x8d,0xc7,0x19,0xf2,0x29,0x61,0x06,0x77,0x07,0x7d,
	0xae,0x1e,0x9a,0x43,0xa5,0xbb,0x83,0x3e,0xb7,0xa6,0x3a,0xf9,0xb9,0x0f,0xfa,0x5d,
	0x18,0xb4,0x5d,0xe1,0xb9,0x81,0x81,0x97,0x4c,0xc1,0x76,0xeb,0x0a,0x1d,0x0f,0xac,
	0xa5,0x2e,0xe3,0xe9,0x22,0x7e,0xb6,0x67,0x1f,0xb5,0x7b,0x7c,0xa2,0x77,0xeb,0x4c,
	0xd0,0x69,0x2e,0xf1,0x96,0xd6,0x3f,0xb5,0x1f,0xd9,0xd8,0x5e,0xbf,0x11,0x7e,0xac,
	0x7a,0x97,0x03,0xc8,0x22,0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,
	0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,
	0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,
	0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,
	0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,
	0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,0x48,0x21,0x68,
	0x48,0x21,0x68,0x48,0x79,0x05,0xcd,0x7b,0x97,0x40,0xc3,0xff,0x0a,0x4d,0xd3,0x10,
	0xf0,0x31,0x72,0xd0,0x34,0x56,0xb7,0x9f,0xa1,0x69,0x1a,0x4b,0xcb,0x3c,0x29,0xa4,
	0x69,0xac,0x2b,0x7f,0x97,0x83,0xa6,0xb1,0xa8,0xe2,0x6d,0x3b,0x9a,0xc6,0x8a,0xac,
	0xfb,0xd0,0xae,0xde,0x32,0xde,0xd5,0x5f,0x56,0x18,0x3f,0x58,0x81,0x94,0x5f,0x94,
	0x34,0x24,0xe9,0x83,0xc3,0x4c,0x41,0x00,0x00,0x00,0x00,0x49,0x45,0x4e,0x44,0xae,
	0x42,0x60,0x82
};


constexpr uint8_t waiting[] = {
  0x89,0x50,0x4e,0x47,0x0d,0x0a,0x1a,0x0a,0x00,0x00,0x00,0x0d,0x49,0x48,0x44,0x52,
	0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0x87,0x08,0x02,0x00,0x00,0x00,0xa7,0x10,0x43,
	0xbc,0x00,0x00,0x00,0x01,0x73,0x52,0x47,0x42,0x01,0xd9,0xc9,0x2c,0x7f,0x00,0x00,
	0x00,0x09,0x70,0x48,0x59,0x73,0x00,0x00,0x0b,0x13,0x00,0x00,0x0b,0x13,0x01,0x00,
	0x9a,0x9c,0x18,0x00,0x00,0x02,0xc4,0x49,0x44,0x41,0x54,0x78,0x9c,0xed,0xda,0x41,
	0x6e,0xe2,0x30,0x00,0x40,0xd1,0x72,0x8c,0x1e,0x66,0x4e,0x3f,0x87,0xe9,0x31,0x3a,
	0x23,0xb1,0x18,0xa4,0x02,0x32,0x38,0x01,0xe7,0xcf,0x7b,0x8b,0x2e,0x82,0x71,0x2c,
	0xfa,0x11,0x26,0xe4,0xf4,0xfb,0xf3,0xf3,0x03,0x2a,0x4e,0x82,0xa6,0x44,0xd0,0xa4,
	0x08,0x9a,0x14,0x41,0x93,0x22,0x68,0x52,0xae,0x04,0xfd,0xeb,0xeb,0xeb,0x2d,0x4b,
	0x81,0x47,0xfd,0xac,0x57,0xd0,0x1c,0x98,0xa0,0x49,0x11,0x34,0x29,0x82,0x26,0x45,
	0xd0,0xa4,0x08,0x9a,0x14,0x41,0x93,0x22,0x68,0x52,0x04,0x4d,0x8a,0xa0,0x49,0x11,
	0x34,0x29,0x82,0x26,0x45,0xd0,0xa4,0x08,0x9a,0x14,0x41,0x93,0x22,0x68,0x52,0x04,
	0x4d,0x8a,0xa0,0x49,0x11,0x34,0x29,0x82,0x26,0x45,0xd0,0xa4,0x08,0x9a,0x14,0x41,
	0x93,0x22,0x68,0x52,0x04,0x4d,0x8a,0xa0,0x49,0x11,0x34,0x29,0x82,0x26,0x45,0xd0,
	0xa4,0x08,0x9a,0x14,0x41,0x93,0x22,0x68,0x52,0x04,0x4d,0x8a,0xa0,0x49,0x11,0x34,
	0x29,0x82,0x26,0x45,0xd0,0xa4,0x08,0x9a,0x14,0x41,0x93,0x22,0x68,0x52,0x04,0x4d,
	0x8a,0xa0,0x49,0x11,0x34,0x29,0xc7,0x0b,0xfa,0xfb,0xfb,0xfb,0xef,0xdf,0xd3,0xe9,
	0x34,0x39,0x66,0xfe,0x2c,0x7b,0xcf,0xb0,0xad,0xf3,0x7a,0xce,0xd6,0x59,0xd5,0xe6,
	0x04,0xbd,0xee,0x0c,0xdb,0x12,0xf4,0x3f,0xff,0x61,0xd0,0xf3,0x6b,0x58,0xc7,0xb1,
	0x56,0x3b,0x49,0xd0,0x7b,0xad,0x61,0x1d,0xc7,0x5a,0xed,0xa4,0x42,0xd0,0x23,0x47,
	0x2e,0x8f,0x5f,0xba,0xf5,0x6f,0x1e,0x9f,0xe1,0xd6,0x3c,0xf3,0x33,0x3c,0x37,0xfe,
	0xb9,0xe7,0x8e,0xbc,0x32,0xb7,0x5e,0xe7,0xf1,0xf5,0xbc,0x80,0xa0,0x05,0x7d,0x7d,
	0xa4,0xa0,0x5f,0x64,0x26,0xe8,0x91,0xd9,0x46,0x66,0x98,0xd9,0xf6,0x8c,0x1f,0x7f,
	0x6e,0x6d,0x8f,0xae,0xf6,0xb9,0xf5,0x2c,0xbb,0x8d,0x11,0xb4,0xa0,0x05,0xfd,0x56,
	0xdb,0x6e,0x39,0xce,0x04,0x7d,0xd0,0x0d,0xc6,0x4f,0x82,0xfe,0xb8,0x33,0x52,0xd0,
	0x82,0xde,0xdd,0x73,0x41,0xcf,0xe7,0x35,0xfe,0xe8,0xb6,0x67,0x9c,0xf9,0x52,0x38,
	0xb2,0xda,0xf9,0x37,0xd8,0x52,0x04,0x2d,0x68,0x41,0x2f,0xe0,0xe7,0xc7,0xdf,0xc8,
	0x07,0xe2,0x56,0x5b,0x8e,0x5b,0x6b,0x18,0x99,0x61,0x7e,0x23,0xb1,0xed,0x96,0xe3,
	0x72,0xcc,0xa5,0xf9,0xad,0xce,0x5b,0x08,0xfa,0xfa,0x78,0x41,0x0b,0x9a,0x5d,0x8c,
	0xff,0x18,0xc4,0x87,0xa0,0xd7,0x27,0xe8,0x87,0x08,0x9a,0x14,0x41,0x93,0x22,0x68,
	0x52,0x04,0x7d,0x3c,0x87,0xb8,0xda,0xf0,0x2e,0x82,0x3e,0x1e,0x41,0xdf,0x21,0xe8,
	0xb5,0x88,0x75,0x92,0xa0,0xd7,0x22,0xe8,0x49,0x2b,0x06,0x3d,0x7e,0xe5,0x75,0xfc,
	0xf7,0xad,0x9f,0xe6,0xef,0x9a,0x78,0xef,0x3a,0x5f,0x73,0xae,0xc3,0x11,0xf4,0x33,
	0x23,0x57,0x58,0xa7,0xa0,0xaf,0x5a,0x2b,0xe8,0x3d,0xee,0x15,0x3e,0xca,0xc8,0xfb,
	0xc7,0x67,0x9e,0xbb,0xdf,0x9d,0xd6,0x0b,0x12,0xf4,0x2a,0x23,0xef,0x1f,0x9f,0x79,
	0xae,0xa0,0x97,0x0b,0x7a,0x7c,0xe4,0x2b,0x33,0xbd,0x65,0xe6,0x1e,0x62,0x41,0x4f,
	0x12,0xb4,0xa0,0x1f,0x3b,0xfb,0xe2,0x8e,0x11,0xf4,0x6a,0xdb,0x83,0x3d,0xde,0x78,
	0xe3,0x33,0x0b,0xfa,0x0e,0x41,0x0b,0xfa,0xb1,0xb3,0x2f,0x6e,0xad,0xa0,0xcf,0xf6,
	0xb8,0x1c,0xb6,0xdf,0x17,0xb8,0xad,0xd6,0x79,0x6b,0xfc,0x7e,0x97,0xed,0xb6,0x7a,
	0x9b,0xcd,0x3c,0xba,0x39,0x41,0x0b,0xfa,0xf9,0xe3,0xf3,0x8f,0x6e,0x6e,0xc5,0xa0,
	0xe1,0x69,0x82,0x26,0x45,0xd0,0xa4,0x08,0x9a,0x14,0x41,0x93,0x22,0x68,0x52,0x04,
	0x4d,0x8a,0xa0,0x49,0x11,0x34,0x29,0x82,0x26,0x45,0xd0,0xa4,0x08,0x9a,0x14,0x41,
	0x93,0x22,0x68,0x52,0x04,0x4d,0x8a,0xa0,0x49,0x11,0x34,0x29,0x82,0x26,0x45,0xd0,
	0xa4,0x08,0x9a,0x14,0x41,0x93,0x22,0x68,0x52,0x04,0x4d,0x8a,0xa0,0x49,0x11,0x34,
	0x29,0x82,0x26,0x45,0xd0,0xa4,0x08,0x9a,0x14,0x41,0x93,0x22,0x68,0x52,0x04,0x4d,
	0x8a,0xa0,0x49,0x11,0x34,0x29,0x82,0x26,0x45,0xd0,0xa4,0x08,0x9a,0x14,0x41,0x93,
	0x22,0x68,0x52,0x04,0x4d,0x8a,0xa0,0x49,0x11,0x34,0x29,0x82,0x26,0x45,0xd0,0xa4,
	0x08,0x9a,0x14,0x41,0x93,0x22,0x68,0x52,0x86,0x82,0x86,0xe3,0x12,0x34,0x29,0x82,
	0x26,0x45,0xd0,0xa4,0x08,0x9a,0x14,0x41,0x93,0xf2,0x07,0xcd,0xe1,0xad,0x06,0xb3,
	0xb4,0x5a,0x25,0x00,0x00,0x00,0x00,0x49,0x45,0x4e,0x44,0xae,0x42,0x60,0x82
};
